{#- IPv4 routes#}
set routing-options static route 1.2.3.4/32 reject
delete routing-options static
{%- for sr in sroutes %}
set routing-options static route {{ sr.dst }} next-hop {{ sr.gw }}
{%- endfor %}

{#- IPv6 routes#}
set routing-options rib inet6.0 static route 1:2:3::4/128 reject
delete routing-options rib inet6.0 static
{%- for sr6 in sroutes6 %}
set routing-options rib inet6.0 static route {{ sr6.dst }} next-hop {{ sr6.gw }}
{%- endfor %}

{#- iface #}
{%- for iface in present_ifaces %}
{%- if iface not in ignore_interfaces %}
delete interfaces {{ iface }}{% endif %}
{%- endfor %}

{#- setup routed/parent interfaces #}
{%- for iface, if_data in interfaces.items() %}
set interfaces {{ iface }} description "{{ if_data.get('description', 'autoconfigured_by_automation') }}"
{%- if if_data.vlan %}
set interfaces {{ iface }} vlan-tagging
{%- endif %}
{%- if 'group' in if_data.get('lacp_options', {}) %}
set interfaces {{ iface }} redundant-ether-options redundancy-group {{ if_data.lacp_options.group }}
{%- endif %}
{%- if 'mode' in if_data.get('lacp_options', {}) %}
set interfaces {{ iface }} redundant-ether-options lacp {{ if_data.lacp_options.mode }}
{%- endif %}
{%- if 'periodic' in if_data.get('lacp_options', {}) %}
set interfaces {{ iface }} redundant-ether-options lacp periodic {{ if_data.lacp_options.periodic }}
{%- endif %}
{%- for addr in if_data.get('addr', []) %}
set interfaces {{ iface }} unit 0 family inet address {{ addr }}
{%- endfor %}
{%- for addr6 in if_data.get('addr6', []) %}
set interfaces {{ iface }} unit 0 family inet6 address {{ addr6 }}
{%- endfor %}
{%- endfor %}

{%- for iface in subinterfaces %}
{%- if iface.ifname not in ignore_interfaces %}
set interfaces {{ iface.ifname }} description "{{ iface.get('description', 'autoconfigured_by_automation') }}"
{%- if 'vlanid' in iface %}
set interfaces {{ iface.ifname }} vlan-id {{ iface.vlanid }}{% endif %}
{%- for addr in iface.get('addr', []) %}
set interfaces {{ iface.ifname }} family inet address {{ addr }}
{%- endfor %}
{%- for addr6 in iface.get('addr6', []) %}
set interfaces {{ iface.ifname }} family inet6 address {{ addr6 }}
{%- endfor %}
{%- endif %}
{%- endfor %}

{#- zones #}
set security zones security-zone dummy
delete security zones
{%- for zn in zones %}
set security zones security-zone {{ zn.name }}
{%- for lp in zn.get('local-proto', []) %}
set security zones security-zone {{ zn.name }} host-inbound-traffic protocols {{ lp }}
{%- endfor %}
{%- for syssvc in zn.get('local-services', []) %}
set security zones security-zone {{ zn.name }} host-inbound-traffic system-services {{ syssvc }}
{%- endfor %}
{%- for zniface in zn.get('interfaces', []) %}
set security zones security-zone {{ zn.name }} interfaces {{ zniface.ifname }}
{%- for lp in zniface.get('local-proto', []) %}
set security zones security-zone {{ zn.name }} interfaces {{ zniface.ifname }}  host-inbound-traffic protocols {{ lp }}
{%- endfor %}
{%- for syssvc in zniface.get('local-services', []) %}
set security zones security-zone {{ zn.name }} interfaces {{ zniface.ifname }}  host-inbound-traffic system-services {{ syssvc }}
{%- endfor %}
{%- endfor %}
{%- endfor %}

{#- address-book #}
set security address-book global address dummy 1.2.3.4/32
delete security address-book global
{%- for addr in addresses %}
set security address-book global address {{ addr.name }} {{ addr.prefix }}
{%- endfor %}
{%- for grp in address_groups %}
{%- for addr in grp.get('addresses', []) %}
set security address-book global address-set {{ grp.name }} address {{ addr }}
{%- endfor %}
{%- endfor %}

{#- applications #}
set applications application dummy protocol tcp
delete applications
{%- for svc in services %}
set applications application {{ svc.name }} protocol {{ svc.proto }}
set applications application {{ svc.name }} destination-port {{ svc.port }}
{%- if 'idletimeout' in svc %}
set applications application {{ svc.name }} inactivity-timeout {{ svc.idletimeout}}{% endif %}
{%- endfor %}

{#- security policies #}
set security policies
delete security policies
{%- for pl in policies %}
set security policies from-zone {{ pl.fromzn }} to-zone {{ pl.tozn }} policy {{ pl.name }}
{%- for src in pl.srcs %}
set security policies from-zone {{ pl.fromzn }} to-zone {{ pl.tozn }} policy {{ pl.name }} match source-address {{ src }}
{%- endfor %}
{%- for dst in pl.dsts %}
set security policies from-zone {{ pl.fromzn }} to-zone {{ pl.tozn }} policy {{ pl.name }} match destination-address {{ dst }}
{%- endfor %}
{%- for app in pl.applications %}
set security policies from-zone {{ pl.fromzn }} to-zone {{ pl.tozn }} policy {{ pl.name }} match application {{ app }}
{%- endfor %}
set security policies from-zone {{ pl.fromzn }} to-zone {{ pl.tozn }} policy {{ pl.name }} then {{ pl.get('action', 'permit') }}
{%- endfor %}

{#- source nat #}
set security nat source pool dummy address 1.2.3.4/32
delete security nat source
{%- for snat_pool in source_nat_pools %}
set security nat source pool {{ snat_pool.name }} address {{ snat_pool.prefix }}
{%- endfor %}
{%- for snat_rs in source_nat_rules %}
set security nat source rule-set {{ snat_rs.set }} description "{{ snat_rs.get('description', 'autoconfigured_by_automation') }}"
{%- if 'fromzn' in snat_rs %}
set security nat source rule-set {{ snat_rs.set }} from zone {{ snat_rs.fromzn }}{% endif %}
{%- if 'tozn' in snat_rs %}
set security nat source rule-set {{ snat_rs.set }} to zone {{ snat_rs.tozn }}{% endif %}
{%- for snat_rule in snat_rs.get('rules', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }}
{%- for app in snat_rule.get('applications', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match application {{ app }}
{%- endfor %}
{%- for proto in snat_rule.get('protos', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match application {{ proto }}
{%- endfor %}
{%- for src in snat_rule.get('srcs', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match source-address {{ src }}
{%- endfor %}
{%- for src in snat_rule.get('src_names', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match source-address-name {{ src }}
{%- endfor %}
{%- for srcp in snat_rule.get('src_ports', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match source-port {{ srcp }}
{%- endfor %}
{%- for dst in snat_rule.get('dsts', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match destination-address {{ dst }}
{%- endfor %}
{%- for dst in snat_rule.get('dst_names', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match destination-address-name {{ dst }}
{%- endfor %}
{%- for dstp in snat_rule.get('dst_ports', []) %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} match destination-port {{ dstp }}
{%- endfor %}
{%- if 'pool' in snat_rule %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} then source-nat pool {{ snat_rule.pool }}
{% else %}
set security nat source rule-set {{ snat_rs.set }} rule {{ snat_rule.name }} then source-nat interface
{% endif %}
{%- endfor %}
{%- endfor %}

{#- destination nat #}
set security nat destination pool dummy address 1.2.3.4/32
delete security nat destination
{%- for dnat_pool in destination_nat_pools %}
set security nat destination pool {{ dnat_pool.name }} address {{ dnat_pool.prefix }}
{%- if 'port' in dnat_pool %}
set security nat destination pool {{ dnat_pool.name }} address {{ dnat_pool.prefix }} port {{ dnat_pool.port }}{% endif %}
{%- endfor %}
{%- for dnat_rs in destination_nat_rules %}
set security nat destination rule-set {{ dnat_rs.set }} description "{{ dnat_rs.get('description', 'autoconfigured_by_automation') }}"
{%- if 'fromzn' in dnat_rs %}
set security nat destination rule-set {{ dnat_rs.set }} from zone {{ dnat_rs.fromzn }}{% endif %}
{%- for dnat_rule in dnat_rs.get('rules', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }}
{%- for app in dnat_rule.get('applications', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match application {{ app }}
{%- endfor %}
{%- for proto in dnat_rule.get('protos', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match application {{ proto }}
{%- endfor %}
{%- for src in dnat_rule.get('srcs', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match source-address {{ src }}
{%- endfor %}
{%- for src in dnat_rule.get('src_names', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match source-address-name {{ src }}
{%- endfor %}
{%- for dst in dnat_rule.get('dsts', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match destination-address {{ dst }}
{%- endfor %}
{%- for dst in dnat_rule.get('dst_names', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match destination-address-name {{ dst }}
{%- endfor %}
{%- for dstp in dnat_rule.get('dst_ports', []) %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} match destination-port {{ dstp }}
{%- endfor %}
set security nat destination rule-set {{ dnat_rs.set }} rule {{ dnat_rule.name }} then destination-nat pool {{ dnat_rule.pool }}
{%- endfor %}
{%- endfor %}

{#- static nat #}
set security nat static rule-set dummy description dummy
delete security nat static
{%- for static_nat_rs in static_nat_rules %}
set security nat static rule-set {{ static_nat_rs.set }} description "{{ static_nat_rs.get('description', 'autoconfigured_by_automation') }}"
{%- if 'fromzn' in static_nat_rs %}
set security nat static rule-set {{ static_nat_rs.set }} from zone {{ static_nat_rs.fromzn }}{% endif %}
{%- for static_nat_rule in static_nat_rs.get('rules', []) %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }}
{%- for src in static_nat_rule.get('srcs', []) %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }} match source-address {{ src }}
{%- endfor %}
{%- for src in static_nat_rule.get('src_names', []) %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }} match source-address-name {{ src }}
{%- endfor %}
{%- for dst in static_nat_rule.get('dsts', []) %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }} match destination-address {{ dst }}
{%- endfor %}
{%- for dst in static_nat_rule.get('dst_names', []) %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }} match destination-address-name {{ dst }}
{%- endfor %}
set security nat static rule-set {{ static_nat_rs.set }} rule {{ static_nat_rule.name }} then static-nat prefix {{ static_nat_rule.natprefix }}
{%- endfor %}
{%- endfor %}

{#- proxy arp nat #}
set security nat proxy-arp interface dummy address 1.2.3.4
delete security nat proxy-arp
{%- for proxy in proxy_arp %}
set security nat proxy-arp interface {{ proxy.interface }} address {{ proxy.prefix }}
{%- endfor %}

{#- NTP #}
set system ntp server 1.2.3.4
delete system ntp
{%- for ntp_s in ntp_servers %}
set system ntp server {{ ntp_s }}
{%- endfor %}

{#- SYSLOG #}
set system syslog user * any emergency
delete system syslog
set system syslog user * any emergency
set system syslog file messages any notice
set system syslog file messages authorization info
set system syslog file interactive-commands interactive-commands any
{%- for syslog_s in syslog_servers %}
set system syslog host {{ syslog_s }} any any
{%- endfor %}

{#- SNMP #}
set snmp community dummy authorization read-only
delete snmp
{%- for snmp_data in snmp %}
set snmp community {{ snmp_data.com }} authorization {{ snmp_data.auth }}
{%- for snmp_client in snmp_data.clients %}
set snmp community {{ snmp_data.com }} clients {{ snmp_client }}
{%- endfor %}
{%- endfor %}
