#!yaml

# needed for Corosync peer discovery
mine_functions:
  network.get_hostname: []

suse_ha:
  fencing:
    # enabled by default
    enable: false
    # disabled by default - only works together with 'enable: true' and with a minimum of two nodes
    stonith_enable: false
    #
    # currently, the formula supports the configuration of IPMI and SBD fencing using the agents from cluster-glue
    #
    # if 'ipmi' is specified, it will be configured - omit the block to not configure IPMI
    ipmi:
      # optional attribute overrides to use for the IPMI resources
      # by default, the values from suse_ha/defaults/fencing/external_ipmi.yaml will be used
      primitive:
        operations:
          start:
            timeout: 30
      # IPMI resources to configure
      hosts:
        # any amount of IPMI resources can be configured
        # all dictionary keys are mandatory
        dev-ipmi0:
          ip: 192.168.120.1
          user: admin
          interface: lanplus
          priv: ADMINISTRATOR
          # it is recommended to encrypt any IPMI credentials using PGP
          # the formula will store the passphrase in a separate file instead of directly in the CIB
          secret: password
    # if 'sbd' is specified, it will be configured - omit the block to not configure SBD
    sbd:
      # SBD resources to configure
      instances:
        minion0:
          # currently pcmk_host_list, pcmk_delay_base and pcmk_delay_max can be configured
          # these are optional and do not have default values set by the formula
          pcmk_host_list: minion0
          pcmk_delay_base: 0
        # use an empty dictionary to not configure any attributes
        minion1: {}
        dynamic:
          pcmk_delay_max: 5
      # block devices to use for SBD
      devices:
        # it is recommended to use unique identifiers as the formula will overwrite any devices without SBD metadata
        # whilst the formula does not limit the amount of devices, the cluster stack might - SBD suggests the use of 1-3 devices
        - /dev/sda
        - /dev/sdb

  cluster:
    # the name of the cluster needs to be a string all node hostnames start with
    # for example, if the cluster nodes are named "pizza1", "pizza2" and "pizza3", then the cluster name must be "pizza"
    # this is needed for Corosync peer discovery using wildcard targeting in the form of "pizza*"
    name: salt-minion
    # "ipv6" by default
    ip_version: ipv4
    # native Corosync only requires the nodeid for IPv6 based operation - this formula always requires it
    nodeid: 1

  # the management settings will be written to the cluster options or the resource defaults
  # for compatibility reasons, the keys can use underscores in place of hyphens
  management:
    # the following are not set by default, and will be removed if configured but not defined in the pillar
    no-quorum-policy: stop
    allow-migrate: true
    batch-limit: 30
    migration-limit: 10

    # if fencing and STONITH are enabled, this will default to true, otherwise to false
    stonith-enabled: true

    # the following are not set by default and will only be considered if fencing and STONITH are enabled
    migration-threshold: 2
    failure-timeout: 60s

  multicast:
    # configure the bind address in a node-specific pillar and have it merged
    bind_address: '192.168.121.55'
    address: '239.0.0.1'
  # generate an authkey using `corosync-keygen` and transform it to base64 using `base64 -w0 /etc/corosync/authkey`
  # it is highly recommended to additionally encrypt the base64 string using PGP, in which case the file header needs to be #!gpg|yaml for the binary to stay intact
  cluster_secret: !!binary |
    LGljyn1fBRRcxLxFEgOmhILNTFY/13Cn3EwqqaBN6ynrX6flhiGyTjfW8eAQ1zlJex3uO9kssIcANw9uXLLpOCJ/Fvia3yzHNzCIxfW0zayUOBSMypN1TMKjad5/n8frAFZWNBhTcbk1Cwi764yBj8ErhsPh264qEreRzznJFGI=

  # cluster resources
  resources:
    # name of the primitive resource
    cluster-httpd:
      # options are mostly following the CIB syntax
      class: ocf
      type: apache
      attributes:
        configfile: /etc/apache2/httpd.conf
      operations:
        monitor:
          interval: 120s
          timeout: 60s
      meta_attributes:
        target-role: Started
      # without "clone" being present, a regular primitive resource will be created
      # with "clone", a clone resource containing the primitive resource will be created
      clone:
        # optional "resource_id", by default, the clone resource will be given the name of the primitive resource with a "-clone" suffix
        resource_id: sample_clone
        # optional meta attributes for the clone resource
        meta_attributes:
          target-role: Started
          # proper booleans seem to work albeit the Pacemaker documentation using lowercase true/false values
          # to be on the safe side, the lowercase boolean value can be quoted
          interleave: true

  # cluster resource constraints
  constraints:
    colo_databases:         # id for the colocation object
      type: rsc_colocation  # "rsc_colocation" and "rsc_order" are supported, but with different options:
                            #   "rsc_colocation" takes "score", and "sets" (if used) needs to be a mapping (example in this block)
                            #   "rsc_order" takes "kind", and "sets" (if used) needs to be a list of mappings (example in blocks below)
      score: 100            # score to set on the main colocation object - mandatory with "resources", optional with "sets"
      resources:            # list of a maximum of 2 resources to configure as rsc/with-rsc respectively
        - VM_dbvm1
        - VM_dbvm2
      sets:                 # alternatively, resource_sets
        coloset_databases:  # id for the resource_set object
          VM_dbvm1:         # resource name
            score: 100      # optional attributes and values to configure on the resource entries in the set
          VM_dbvm2: {}      # empty dict if no additional attributes are to be configured on the resource entry in the set

    order_postgresql_etherpad:
      type: rsc_order
      kind: mandatory
      resources:  # list of a maximum of 2 resources to configure as "first"/"then" respectively
        - VM_postgresql.example.com
        - VM_etherpad.example.com

    order_dns_mysql:
      type: rsc_order
      kind: mandatory
      sets:                   # list of "resource_set"s inside the "rsc_order", will be configured as <name of constraint>-<index>
        - resources:          # "resources" will be mapped to ordered "resource_ref" entries
            - VM_dns1.example.com
            - VM_dns2.example.com
          sequential: false   # other key/values will be mapped to attributes of the "resource_set"
        - resources:
            - VM_galera1.example.com
            - VM_galera2.example.com
            - VM_galera3.example.com
          sequential: true
