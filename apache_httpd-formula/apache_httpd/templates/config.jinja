{{ pillar.get('managed_by_salt_formula', '# Managed by the apache_httpd formula') }}
{%- set config = salt['pillar.get']('apache_httpd:' ~ type, {}).get(name, {}) %}

{%- if type == 'vhosts' %}
{%- set i = 4 %}

{%- if 'listen' in config %}
{%- set listen = config.pop('listen') %}
{%- else %}
{%- set listen = ['*:80'] %}
{%- endif %}

{%- if listen is string %}
{%- set listen = [listen] %}
{%- endif %}

{%- set defaults = {
      'customlog': {
        'location': '{0}/{1}-access_log'.format(logdir, name),
        'format': 'combined',
        'env': None,
      },
    }
%}

{%- if 'CustomLog' in config and config['CustomLog'] is mapping %}
  {%- set customlog = config.pop('CustomLog') %}
  {%- do salt.log.error(customlog) %}
  {%- for customlog_option in defaults['customlog'].keys() %}
    {%- do salt.log.error(customlog_option) %}
    {%- if not customlog_option in customlog %}
      {%- do customlog.update({customlog_option: defaults['customlog'][customlog_option]}) %}
    {%- endif %}
  {%- endfor %}
{%- else %}
  {%- set customlog = defaults['customlog'] %}
{%- endif %}
{#- if CustomLog is in config and is not a mapping, assume a full CustomLog line to write as-is #}

<VirtualHost {%- for listener in listen %} {{ listener }}{% endfor -%}>
    {%- if not 'ServerName' in config %}
    ServerName {{ name }}
    {%- endif %}
    {%- if not 'CustomLog' in config %}
    CustomLog {{ customlog['location'] }} {{ customlog['format'] }}{{ ' env' ~ customlog['env'] if customlog['env'] else '' }}
    {%- endif %}
    {%- if not 'ErrorLog' in config %}
    ErrorLog {{ '{0}/{1}-error_log'.format(logdir, name) }}
    {%- endif %}

{%- elif type == 'configs' %}
{%- set i = 0 %}

{%- endif %} {#- close config type check #}

{%- for option, value in config.items() %}
  {%- if value is sameas true %}
    {%- set value = 'on' %}
  {%- elif value is sameas false %}
    {%- set value = 'off' %}
  {%- endif %}

  {%- if value is iterable and value is not mapping %}

    {%- if value is string %}
      {%- set value = [value] %}
    {%- endif %}

    {%- if option in repetitive_options %}
      {%- for entry in value %}
{{ ( option ~ ' ' ~ entry ) | indent(i, True) }}
      {%- endfor %}
    {%- else %}
{{ ( option ~ ' ' ~ ' '.join(value) ) | indent(i, True) }}
    {%- endif %}

  {%- elif value is mapping %}

    {%- for low_option, low_value in value.items() %}

      {%- if low_value is mapping %}
        {%- if option not in repetitive_options %}
{{ ( '<' ~ option ~ ' "' ~ low_option ~ '">' ) | indent(i, True) }}
        {%- endif %} {#- close first inner repetitive_option check #}
        {%- for low_low_option, low_low_values in low_value.items() %}
          {%- if low_low_values is string %}
            {%- set low_low_values = [low_low_values] %}
          {%- endif %}
          {%- if option in repetitive_options %}
            {%- for low_low_value in low_low_values %}
{{ ( option ~ ' ' ~ low_option ~ ' ' ~ low_low_option ~ ' ' ~ low_low_value ) | indent(i, True) }}
            {%- endfor %}
          {%- else %}
  {{ ( low_low_option ~ ' ' ~ ' '.join(low_low_values) ) | indent(i + 2, True) }}
          {%- endif %} {#- close second inner repetitive_option check #}
        {%- endfor %} {#- close low_value iteration #}
        {%- if option not in repetitive_options %}
{{ ( '</' ~ option ~ '>' ) | indent(i, True) }}
        {%- endif %} {#- close third inner repetitive_option check #}

      {%- elif low_value is string %}
{{ ( option ~ ' ' ~ low_option ~ ' ' ~ low_value ) | indent(i, True) }}

      {%- endif %} {#- close low_value type check #}

    {%- endfor %} {#- close value iteration #}

  {%- endif %} {#- close value type check #}

{%- endfor %} {#- close config iteration #}

{%- if type == 'vhosts' %}
</VirtualHost>
{%- endif %} {#- close vhost check #}
